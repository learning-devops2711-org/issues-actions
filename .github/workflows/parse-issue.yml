name: Parse Issue Body and Inject Env

on:
  issues:
    types: [opened, edited]

jobs:
  parse_issue_data:
    runs-on: ubuntu-latest
    permissions:
      issues: write
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.x'

      - name: Get Workflow Run URL
        id: get_run_url
        run: |
          RUN_URL="${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}"
          echo "workflow_run_url=${RUN_URL}" >> "$GITHUB_OUTPUT"

      - name: Comment on Issue (Job Started)
        uses: peter-evans/create-or-update-comment@v4
        with:
          issue-number: ${{ github.event.issue.number }}
          body: |
            üöÄ **Workflow started!**
            Parsing issue body and processing parameters.

            You can track the progress here: ${{ steps.get_run_url.outputs.workflow_run_url }}
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Parse Issue Body and Inject into Environment
        id: parse_and_inject
        env:
          ISSUE_BODY: ${{ github.event.issue.body }}
        run: python parse_issue_body.py

      - name: Use Parsed Data and Prepare Summary
        id: prepare_summary # New step to prepare the summary text
        run: |
          # The parsed_json output is a JSON string. We can use `jq` to format it nicely.
          # Ubuntu runners usually have `jq` pre-installed.
          if command -v jq &> /dev/null; then
              PARSED_SUMMARY=$(echo '${{ steps.parse_and_inject.outputs.parsed_json }}' | jq '. | to_entries[] | "* **\(.key)**: `\(.value)`"')
              echo "parsed_summary<<EOF" >> "$GITHUB_OUTPUT"
              echo "Parsed Parameters:" >> "$GITHUB_OUTPUT"
              echo "${PARSED_SUMMARY}" >> "$GITHUB_OUTPUT"
              echo "EOF" >> "$GITHUB_OUTPUT"
          else
              echo "parsed_summary<<EOF" >> "$GITHUB_OUTPUT"
              echo "Parsed Parameters (raw JSON - jq not found):" >> "$GITHUB_OUTPUT"
              echo "\`\`\`json" >> "$GITHUB_OUTPUT"
              echo "${{ steps.parse_and_inject.outputs.parsed_json }}" >> "$GITHUB_OUTPUT"
              echo "\`\`\`" >> "$GITHUB_OUTPUT"
              echo "EOF" >> "$GITHUB_OUTPUT"
          fi
        shell: bash # Ensure bash for multi-line output with EOF marker

      - name: Comment on Issue (Job Finished - Success)
        if: success()
        uses: peter-evans/create-or-update-comment@v4
        with:
          issue-number: ${{ github.event.issue.number }}
          body: |
            ‚úÖ **Workflow finished successfully!**
            Parameters parsed and injected into environment variables.

            ${{ steps.prepare_summary.outputs.parsed_summary }}

            Details: ${{ steps.get_run_url.outputs.workflow_run_url }}
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Comment on Issue (Job Finished - Failure)
        if: failure()
        uses: peter-evans/create-or-update-comment@v4
        with:
          issue-number: ${{ github.event.issue.number }}
          body: |
            ‚ùå **Workflow failed!**
            There was an error during parameter parsing or subsequent steps.

            ${{ steps.prepare_summary.outputs.parsed_summary }}

            Please check the workflow run for details: ${{ steps.get_run_url.outputs.workflow_run_url }}
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Close Issue on Success
        if: success()
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          gh issue close ${{ github.event.issue.number }} --comment "üéâ This issue has been processed and is now closed. Thank you!"